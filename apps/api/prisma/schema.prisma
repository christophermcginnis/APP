generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum CircleAccess {
  OPEN
  WAITLIST
  PREMIUM
}

enum SessionStatus {
  SCHEDULED
  LIVE
  COMPLETED
  DRAFT
}

enum CompanionTaskKind {
  SUMMARY
  CLIP
  INVITES
  QUIZ
}

enum CompanionTaskStatus {
  QUEUED
  IN_PROGRESS
  READY
}

model Circle {
  id             String           @id @default(uuid())
  name           String
  focusArea      String
  cadence        String
  access         CircleAccess     @default(WAITLIST)
  members        Int              @default(0)
  companionTone  String
  ownerId        String
  owner          User             @relation("CircleOwner", fields: [ownerId], references: [id], onDelete: Cascade)
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  sessions       CircleSession[]
  companionTasks CompanionTask[]
}

model CircleSession {
  id                 String        @id @default(uuid())
  circleId           String
  circle             Circle        @relation(fields: [circleId], references: [id], onDelete: Cascade)
  scheduledFor       DateTime
  topic              String
  status             SessionStatus @default(SCHEDULED)
  hostId             String
  host               User          @relation("SessionHost", fields: [hostId], references: [id], onDelete: Cascade)
  companionSummaryId String?
  createdAt          DateTime      @default(now())
  updatedAt          DateTime      @updatedAt
}

model CompanionTask {
  id          String               @id @default(uuid())
  circleId    String
  circle      Circle               @relation(fields: [circleId], references: [id], onDelete: Cascade)
  title       String
  kind        CompanionTaskKind
  status      CompanionTaskStatus  @default(QUEUED)
  etaMinutes  Int                  @default(0)
  payload     Json                 @default("{}")
  createdAt   DateTime             @default(now())
  updatedAt   DateTime             @updatedAt
}

model User {
  id             String          @id @default(uuid())
  name           String?
  email          String?         @unique
  emailVerified  DateTime?
  image          String?
  handle         String?         @unique
  bio            String?
  birthdate      DateTime?
  passwordHash   String?
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  circles        Circle[]        @relation("CircleOwner")
  hostedSessions CircleSession[] @relation("SessionHost")
  accounts       Account[]
  sessions       Session[]
}

model Account {
  id                String   @id @default(uuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?  @map("refresh_token")
  access_token      String?  @map("access_token")
  expires_at        Int?     @map("expires_at")
  token_type        String?  @map("token_type")
  scope             String?
  id_token          String?  @map("id_token")
  session_state     String?  @map("session_state")
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(uuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
